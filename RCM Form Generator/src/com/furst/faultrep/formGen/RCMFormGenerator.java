/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.furst.faultrep.formGen;

import com.furst.faultrep.menus.AppMenuPrimaryEntry;
import com.furst.faultrep.menus.RibbonPanel;
import com.furst.faultrep.tables.FolderTableModel;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.XMLConstants;
import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import static org.apache.xerces.jaxp.JAXPConstants.JAXP_SCHEMA_LANGUAGE;
import static org.apache.xerces.jaxp.JAXPConstants.W3C_XML_SCHEMA;
import org.apache.xerces.util.XMLCatalogResolver;
import org.apache.xml.resolver.tools.CatalogResolver;
import org.pushingpixels.flamingo.api.common.JCommandButton;
import org.pushingpixels.flamingo.api.common.icon.ImageWrapperResizableIcon;
import org.pushingpixels.flamingo.api.common.icon.ResizableIcon;
import org.pushingpixels.flamingo.api.ribbon.JFlowRibbonBand;
import org.pushingpixels.flamingo.api.ribbon.JRibbonBand;
import org.pushingpixels.flamingo.api.ribbon.JRibbonComponent;
import org.pushingpixels.flamingo.api.ribbon.JRibbonFrame;
import org.pushingpixels.flamingo.api.ribbon.RibbonApplicationMenu;
import org.pushingpixels.flamingo.api.ribbon.RibbonElementPriority;
import org.pushingpixels.flamingo.api.ribbon.RibbonTask;
import org.pushingpixels.flamingo.api.ribbon.resize.CoreRibbonResizePolicies;
import org.pushingpixels.flamingo.api.ribbon.resize.IconRibbonBandResizePolicy;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;

/**
 *
 * @author tfurst
 */
public class RCMFormGenerator extends JRibbonFrame {

    /**
     * Creates new form RCMFormGenerator
     */
    
    private String counterText = "";
    public RCMFormGenerator() {
        initDb();
        initXpath();
        initComponents();
        this.setApplicationIcon(getIcon("rcmLogoNoBg32x32.png"));
        setRibbon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        List<DataModuleObject> dummyList = new ArrayList();
        DataModuleObject dmo = new DataModuleObject("TEST",true,false);
        dummyList.add(dmo);
        ftm = new FolderTableModel(dummyList);
        folderTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        dmCounterLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Forms Generator");
        setMinimumSize(new java.awt.Dimension(1100, 600));

        folderTable.setModel(ftm);
        //folderTable.setDefaultRenderer(Object.class, new BoolCellRenderer());
        ((JComponent) folderTable.getDefaultRenderer(Boolean.class)).setOpaque(true);
        //folderTable.getColumnModel().getColumn(1).setCellRenderer(new BoolCellRenderer());
        //folderTable.getColumnModel().getColumn(2).setCellRenderer(new BoolCellRenderer());
        jScrollPane1.setViewportView(folderTable);

        dmCounterLabel.setText(counterText);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dmCounterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 485, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dmCounterLabel))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Output"));

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RCMFormGenerator().setVisible(true);
            }
        });
    }

    private ResizableIcon getIcon(String res) {
        String resource = "com/furst/faultrep/icons/" + res;
        return ImageWrapperResizableIcon.getIcon(RCMFormGenerator.class.getClassLoader().getResource(resource), new Dimension(32, 32));
    }
    //method call to process the files
    /*
        1. find all .xml
            a. Ensure they are dmodules (check via XPath)
                i. update the label giving the count of modules in the folder
        2. find any .xlsm
            a. compare to names of .xml, matches indicate BP exists
                i. need to ask if update is required for those that exist
        3. find any .pdf
            a. compare to names of .xml, matched indicate PDF exists
                i. need to ask if update is required
    */
    private void processFolder(File dir)
    {
        //will need to have a SwingWorker once working
        folderPath = dir.getAbsolutePath();
        String title = this.getTitle();
        this.setTitle(title + " - " + folderPath);
        File[] xmlFiles = dir.listFiles(new XmlFileFilter());
        File[] allFiles = dir.listFiles();
        String[] names = new String[allFiles.length];
        
        List<DataModuleObject> mods = new ArrayList();
        
        int i = 0;
        for(File f : allFiles)
        {
            names[i] = f.getName();
            i++;
        }
        
        int c = 0;
        for(File f : xmlFiles)
        {
            String name = f.getName().substring(0, f.getName().lastIndexOf("."));
            String bpName = name + ".xlsm";
            String pdfName = name + ".pdf";
            boolean bp = false;
            boolean pdf = false;
            
            if(Arrays.asList(names).contains(bpName))
            {
                bp = true;
            }
            
            if(Arrays.asList(names).contains(pdfName))
            {
                pdf = true;
            }
            
            mods.add(new DataModuleObject(name,bp,pdf));
            
            c++;
        }
        
        FolderTableModel ftm = new FolderTableModel(mods);
        folderTable.setModel(ftm);
        
        counterText = "Folder has " + c + " modules";
        dmCounterLabel.setText(counterText);
    }
    
    private void createBp()
    {
        List<DataModuleObject> dms = new ArrayList();
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        dms = model.getAllMods();
        
        for(DataModuleObject d : dms)
        {
            if(d.isHasBoiler())
            {
                //ask if it needs to be updated
            }
            else
            {
                populateBp(folderPath + File.separator + d.getBaseDmc() + ".xlsm", getDmTitle(d));
            }
        }
    }
    
    private void populateBp(String bpSavePath, String title)
    {
        try(FileInputStream fis = new FileInputStream(new File("templates/CRH-BoilerPlate-REV2.xlsm")))
        {
           XSSFWorkbook wb = new XSSFWorkbook(fis);
           XSSFSheet bpSheet = wb.getSheet("BoilerPlate");
           
           XSSFCell titleCell = bpSheet.getRow(5).getCell(1);
           titleCell.setCellValue(title);
           
           
           try(FileOutputStream fos = new FileOutputStream(new File(bpSavePath)))
           {
               wb.write(fos);
           }
        } 
        catch (IOException ex) {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String getDmTitle(DataModuleObject dmo)
    {
        String xmlFile = folderPath + File.separator + dmo.getBaseDmc() + ".xml";
        String tn_xp = "/dmodule/identAndStatusSection/dmAddress/dmAddressItems/dmTitle/techName";
        String in_xp = "/dmodule/identAndStatusSection/dmAddress/dmAddressItems/dmTitle/infoName";
        try
        {
            Document doc = DB.parse(new File(xmlFile));
            Node tn = (Node)XP.compile(tn_xp).evaluate(doc, XPathConstants.NODE);
            Node iN = (Node)XP.compile(in_xp).evaluate(doc, XPathConstants.NODE);
            
            return tn + " - " + iN;
        } catch (SAXException | IOException | XPathExpressionException ex) {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        
    }
    
    private XMLCatalogResolver createXMLCatalogResolver(CatalogResolver resolver)
    {
        int i = 0;
        
        Vector files = resolver.getCatalog().getCatalogManager().getCatalogFiles();
        String[] catalogs = new String[files.size()];
        XMLCatalogResolver xcr = new XMLCatalogResolver();
        
        for(Object file : files)
        {
            catalogs[i] = new File(file.toString()).getAbsolutePath();
        }
        
        xcr.setCatalogList(catalogs);
        return xcr;
    }
    
    private void initDb()
    {
        try 
        {
            //DBF = DocumentBuilderFactory.newInstance();
            //DB = DBF.newDocumentBuilder();
            resolver = new CatalogResolver();
            eHandler = new DocumentErrorHandler();
            XMLCatalogResolver xres = createXMLCatalogResolver(resolver);
            DBF = DocumentBuilderFactory.newInstance();
            DBF.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            DBF.setNamespaceAware(true);
            DB = DBF.newDocumentBuilder();
            DB.setEntityResolver(xres);
            DB.setErrorHandler(eHandler);
        } 
        catch (ParserConfigurationException ex) 
        {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initXpath()
    {
        XPF = XPathFactory.newInstance();
        XP = XPF.newXPath();
        
        XP.setNamespaceContext(new NamespaceContext(){
            @Override
            public String getNamespaceURI(String prefix) {
                if(prefix == null)
                {
                    throw new NullPointerException("Null prefix");
                }
                else if("xsi".equals(prefix))
                {
                    return "http://www.w3.org/2001/XMLSchema-instance";
                }
                else if("xml".equals(prefix))
                {
                    return XMLConstants.XML_NS_URI;
                }
                else
                {
                    return XMLConstants.NULL_NS_URI;
                }
            }

            @Override
            public String getPrefix(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator getPrefixes(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        
        });
    }
    
    private void setRibbon() {

        chooseFolderBand = new JRibbonBand("Input", null);
        createSettingsBand = new JFlowRibbonBand("Output settings", null);
        outputBand = new JRibbonBand("Ouput types", null);

        chooseFolderButton = new JCommandButton("Choose Folder", getIcon("folder-12.png"));
        chooseFolderButton.setDisabledIcon(getIcon("folder-12.png"));
        chooseFolderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                jFileChooser1.setDialogTitle("Choose Folder");
                int res = jFileChooser1.showOpenDialog(RCMFormGenerator.this);
                if(res == JFileChooser.APPROVE_OPTION)
                {
                    processFolder(jFileChooser1.getSelectedFile());
                }
            }
        });

        createAllItemsButton = new JCommandButton("Create Boilerplate and PDF", getIcon("list.png"));
        createAllItemsButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                String writer = rp.getWriter();
                String writeDate = rp.getWriterDate();
                JOptionPane.showMessageDialog(RCMFormGenerator.this, rp.getWriter() + " - " + writeDate);
            }
            });
        createAllBoilerButton = new JCommandButton("Create only Boilerplate", getIcon("notepad.png"));
        createAllPdfButton = new JCommandButton("Create only PDF", getIcon("notebook.png"));
        
        mylabel = new javax.swing.JLabel();
        myjtf = new javax.swing.JTextField();
        mylabel.setText("Writer");
        myjtf.setColumns(100);
        
        rp = new RibbonPanel();
        
        JRibbonComponent jrc = new JRibbonComponent(rp);
        //JRibbonComponent jrc2 = new JRibbonComponent(myjtf);
        
        chooseFolderBand.addCommandButton(chooseFolderButton, RibbonElementPriority.TOP);
        //createSettingsBand.addCommandButton(b1a, RibbonElementPriority.TOP);
        createSettingsBand.addFlowComponent(jrc);
        //createSettingsBand2.addRibbonComponent(jrc2);
        outputBand.addCommandButton(createAllItemsButton, RibbonElementPriority.TOP);
        outputBand.addCommandButton(createAllBoilerButton, RibbonElementPriority.MEDIUM);
        outputBand.addCommandButton(createAllPdfButton, RibbonElementPriority.MEDIUM);

        chooseFolderBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(chooseFolderBand.getControlPanel()), new IconRibbonBandResizePolicy(chooseFolderBand.getControlPanel())));
        //createSettingsBand2.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.(createSettingsBand2.getControlPanel())));
        createSettingsBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.FlowThreeRows(createSettingsBand.getControlPanel())));
        outputBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(outputBand.getControlPanel()), 
                new CoreRibbonResizePolicies.Mirror(outputBand.getControlPanel()),
                new CoreRibbonResizePolicies.Mid2Low(outputBand.getControlPanel()),
                new IconRibbonBandResizePolicy(outputBand.getControlPanel())));

        createTask = new RibbonTask("Generator Functions", chooseFolderBand, createSettingsBand, outputBand);

        menu = new AppMenu();

        this.getRibbon().setApplicationMenu(menu);
        this.getRibbon().addTask(createTask);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dmCounterLabel;
    private javax.swing.JTable folderTable;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JLabel mylabel;
    private javax.swing.JTextField myjtf;
    
    private DocumentBuilderFactory DBF;
    private DocumentBuilder DB;
    private XPathFactory XPF;
    private XPath XP;
    private CatalogResolver resolver;
    private ErrorHandler eHandler;
    
    private String folderPath;
    
    private RibbonPanel rp;
    private RibbonTask createTask; //Database actions tab
    
    private RibbonApplicationMenu menu;
    
    private JRibbonBand chooseFolderBand;
    private JFlowRibbonBand createSettingsBand;
    private JRibbonBand outputBand;
    
    private JCommandButton chooseFolderButton;
    private JCommandButton createAllItemsButton;
    private JCommandButton createAllBoilerButton;
    private JCommandButton createAllPdfButton;
    
    private FolderTableModel ftm;
    class AppMenu extends RibbonApplicationMenu {

        private boolean testBool = false;
        private AppMenuPrimaryEntry exitEntry;

        public AppMenu() {
            
            exitEntry = new AppMenuPrimaryEntry(getIcon("exit.png"), "Exit", new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);//To change body of generated methods, choose Tools | Templates.
                }
            }, JCommandButton.CommandButtonKind.ACTION_ONLY);

            this.addMenuEntry(exitEntry);

        }
    }

}
