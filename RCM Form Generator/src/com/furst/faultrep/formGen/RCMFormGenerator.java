/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.furst.faultrep.formGen;

import com.furst.faultrep.menus.AppMenuPrimaryEntry;
import com.furst.faultrep.menus.RibbonDraftPanel;
import com.furst.faultrep.menus.RibbonStagePanel;
import com.furst.faultrep.tables.FolderTableModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.Painter;
import javax.swing.SwingWorker;
import javax.swing.UIDefaults;
import javax.xml.XMLConstants;
import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.fop.apps.FOPException;
import org.apache.fop.apps.FOUserAgent;
import org.apache.fop.apps.Fop;
import org.apache.fop.apps.FopFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import static org.apache.xerces.jaxp.JAXPConstants.JAXP_SCHEMA_LANGUAGE;
import static org.apache.xerces.jaxp.JAXPConstants.W3C_XML_SCHEMA;
import org.apache.xerces.util.XMLCatalogResolver;
import org.apache.xml.resolver.tools.CatalogResolver;
import org.apache.xmlgraphics.util.MimeConstants;
import org.pushingpixels.flamingo.api.common.JCommandButton;
import org.pushingpixels.flamingo.api.common.icon.ImageWrapperResizableIcon;
import org.pushingpixels.flamingo.api.common.icon.ResizableIcon;
import org.pushingpixels.flamingo.api.ribbon.JFlowRibbonBand;
import org.pushingpixels.flamingo.api.ribbon.JRibbonBand;
import org.pushingpixels.flamingo.api.ribbon.JRibbonComponent;
import org.pushingpixels.flamingo.api.ribbon.JRibbonFrame;
import org.pushingpixels.flamingo.api.ribbon.RibbonApplicationMenu;
import org.pushingpixels.flamingo.api.ribbon.RibbonElementPriority;
import org.pushingpixels.flamingo.api.ribbon.RibbonTask;
import org.pushingpixels.flamingo.api.ribbon.resize.CoreRibbonResizePolicies;
import org.pushingpixels.flamingo.api.ribbon.resize.IconRibbonBandResizePolicy;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;

/**
 *
 * @author tfurst
 */
public class RCMFormGenerator extends JRibbonFrame {

    /**
     * Creates new form RCMFormGenerator
     */
    
    private String counterText = "";
    private final String FORM_TIT = "Forms Generator";
    private String outputFolder = "";
    private boolean sepOutputFolder = false;
    public RCMFormGenerator() {
        
        initFop();
        initDb();
        initXpath();
        initComponents();
        
        jProgressBar1.setVisible(false);
        this.setApplicationIcon(getIcon("rcmLogoNoBg32x32.png"));
        setRibbon();
        Logger.getRootLogger().addAppender(new FormGenAppenderSkeleton(outputArea));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        tablePopUpMenu = new javax.swing.JPopupMenu();
        popUpPdfItem = new javax.swing.JMenuItem();
        popUpBpItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        List<DataModuleObject> dummyList = new ArrayList();
        DataModuleObject dmo = new DataModuleObject("TEST",true,false);
        dummyList.add(dmo);
        ftm = new FolderTableModel(dummyList);
        folderTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        dmCounterLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();

        popUpPdfItem.setText("Create PDF");
        popUpPdfItem.setIcon(getIcon("notebook.png", new Dimension(16, 16)));
        popUpPdfItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpPdfItemActionPerformed(evt);
            }
        });
        tablePopUpMenu.add(popUpPdfItem);

        popUpBpItem.setText("Create Boilerplate");
        popUpBpItem.setIcon(getIcon("notepad.png", new Dimension(16,16)));
        popUpBpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpBpItemActionPerformed(evt);
            }
        });
        tablePopUpMenu.add(popUpBpItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Forms Generator");
        setMinimumSize(new java.awt.Dimension(1400, 600));

        folderTable.setModel(ftm);
        //folderTable.setDefaultRenderer(Object.class, new BoolCellRenderer());
        clearTable();
        ((JComponent) folderTable.getDefaultRenderer(Boolean.class)).setOpaque(true);
        folderTable.setComponentPopupMenu(tablePopUpMenu);
        //folderTable.getColumnModel().getColumn(1).setCellRenderer(new BoolCellRenderer());
        //folderTable.getColumnModel().getColumn(2).setCellRenderer(new BoolCellRenderer());
        jScrollPane1.setViewportView(folderTable);

        UIDefaults defs = new UIDefaults();
        defs.put("ProgressBar[Enabled+Indeterminate].foregroundPainter", new ProgressBarPainter(new Color(51,204,255)));
        defs.put("ProgressBar[Enabled+Indeterminate].progressPadding", 6);
        jProgressBar1.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        jProgressBar1.putClientProperty("Nimbus.Overrides", defs);

        dmCounterLabel.setText(counterText);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dmCounterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 376, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dmCounterLabel))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Output"));

        outputArea.setEditable(false);
        outputArea.setBackground(new java.awt.Color(0, 0, 0));
        outputArea.setColumns(20);
        outputArea.setForeground(new java.awt.Color(51, 204, 255));
        outputArea.setLineWrap(true);
        outputArea.setRows(5);
        outputArea.setTabSize(5);
        outputArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(outputArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void popUpPdfItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpPdfItemActionPerformed
        createSinglePdf();
    }//GEN-LAST:event_popUpPdfItemActionPerformed

    private void popUpBpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpBpItemActionPerformed
        createSingleBp();
    }//GEN-LAST:event_popUpBpItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RCMFormGenerator().setVisible(true);
            }
        });
    }

    private ResizableIcon getIcon(String res) {
        String resource = "com/furst/faultrep/icons/" + res;
        return ImageWrapperResizableIcon.getIcon(RCMFormGenerator.class.getClassLoader().getResource(resource), new Dimension(32, 32));
    }
    
    private ResizableIcon getIcon(String res, Dimension dim) {
        String resource = "com/furst/faultrep/icons/" + res;
        return ImageWrapperResizableIcon.getIcon(RCMFormGenerator.class.getClassLoader().getResource(resource), dim);
    }
    //method call to process the files
    /*
        1. find all .xml
            a. Ensure they are dmodules (check via XPath)
                i. update the label giving the count of modules in the folder
        2. find any .xlsm
            a. compare to names of .xml, matches indicate BP exists
                i. need to ask if update is required for those that exist
        3. find any .pdf
            a. compare to names of .xml, matched indicate PDF exists
                i. need to ask if update is required
    */
    private void processFolder(File dir)
    {
        //will need to have a SwingWorker once working
        folderPath = dir.getAbsolutePath();
        this.setTitle(FORM_TIT + " - " + folderPath);
        File[] xmlFiles = dir.listFiles(new XmlFileFilter());
        File[] allFiles = dir.listFiles();
        String[] names = new String[allFiles.length];
        
        List<DataModuleObject> mods = new ArrayList();
        
        int i = 0;
        for(File f : allFiles)
        {
            names[i] = f.getName();
            i++;
        }
        
        int c = 0;
        for(File f : xmlFiles)
        {
            String name = f.getName().substring(0, f.getName().lastIndexOf("."));
            String bpName = name + ".xlsm";
            String pdfName = name + ".pdf";
            boolean bp = false;
            boolean pdf = false;
            
            if(Arrays.asList(names).contains(bpName))
            {
                bp = true;
            }
            
            if(Arrays.asList(names).contains(pdfName))
            {
                pdf = true;
            }
            
            mods.add(new DataModuleObject(name,bp,pdf));
            
            c++;
        }
        
        FolderTableModel model = new FolderTableModel(mods);
        folderTable.setModel(model);
        
        counterText = "Folder has " + c + " modules";
        dmCounterLabel.setText(counterText);
    }
    
    private void processOutputFolder(String f_path, DataModuleObject dmo, int row)
    {
        String baseDmc = dmo.getBaseDmc();
        File directory = new File(f_path);
        
        File[] files = directory.listFiles();
        for(File f : files)
        {
            String name = f.getName().substring(0, f.getName().lastIndexOf("."));
            String bpName = name + ".xlsm";
            String pdfName = name + ".pdf";
            boolean bp = dmo.isHasBoiler();
            boolean pdf = dmo.isHasPdf();
            
            if(name.equals(baseDmc))
            {
                if(f.getName().equals(bpName))
                {
                    bp = true;
                }
                if(f.getName().equals(pdfName))
                {
                    pdf = true;
                }
            }
            
            dmo.setHasBoiler(bp);
            dmo.setHasPdf(pdf);
        }
        
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        model.setValueAt(dmo.getBaseDmc(), row, 0);
        model.setValueAt(dmo.isHasBoiler(), row, 1);
        model.setValueAt(dmo.isHasPdf(), row, 2);
        model.fireTableDataChanged();
//        List<DataModuleObject> mods = model.getAllMods();
//        mods.set(row, dmo);
//        folderTable.setModel(new FolderTableModel(mods));
    }
    
    private void personError()
    {
        JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
    }
    
    private void createSinglePdf()
    {
        /*
            swing worker
            sys out listeners for FOP output to ta
            look into colored text for differnet level severity
        */
        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Creating PDFs...");
        jProgressBar1.setIndeterminate(true);
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        final DataModuleObject d = model.getDmod(folderTable.getSelectedRow());
        final int row = folderTable.getSelectedRow();
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>()
        {
            @Override
            protected Boolean doInBackground() 
            {
                if(rp.getWriter().equals("Choose...") || rp.getQa1().equals("Choose...") || rp.getAtr().equals("Choose..."))
                {
//                     JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
                    personError();
                }
                else
                {
                    jProgressBar1.setString("Creating " + d.getBaseDmc() + " PDF...");
                    publishOutput("Creating " + d.getBaseDmc() + " PDF");
                    populatePdf(d,row);
                }
                
                return true; 
            }
            @Override
            protected void done()
            {
                publishOutput("Processing complete");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setVisible(false);
            }

        };
        worker.execute();
    }
    
    private void createPdf()
    {
        /*
            swing worker
            sys out listeners for FOP output to ta
            look into colored text for differnet level severity
        */
        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Creating PDFs...");
        jProgressBar1.setIndeterminate(true);
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        final List<DataModuleObject> dms = model.getAllMods();
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>()
        {
            @Override
            protected Boolean doInBackground() 
            {
                if(rp.getWriter().equals("Choose...") || rp.getQa1().equals("Choose...") || rp.getAtr().equals("Choose..."))
                {
//                     JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
                    personError();
                }
                else
                {
                    for(DataModuleObject d : dms)
                    {
                        int i = dms.indexOf(d);
                        jProgressBar1.setString("Creating " + d.getBaseDmc() + " PDF...");
                        publishOutput("Creating " + d.getBaseDmc() + " PDF");
//                        outputArea.append("Processing " + d.getBaseDmc() + "...\n");
//                        outputArea.setCaretPosition(outputArea.getText().length());
                        populatePdf(d,i);
                    }
                }
                
                return true; 
            }
            @Override
            protected void done()
            {
                publishOutput("Processing complete");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setVisible(false);
            }

        };
        worker.execute();
    }
    
    private void publishOutput(String output)
    {
        outputArea.append(output + "...\n");
        outputArea.setCaretPosition(outputArea.getText().length());
    }
//    
//    private void outputFolderError()
//    {
//        JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose an output folder.", "Choice required", JOptionPane.WARNING_MESSAGE);
//    }
    
    private void createBoth()
    {
        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Creating boilerplates and PDFs...");
        jProgressBar1.setIndeterminate(true);
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        final List<DataModuleObject> dms = model.getAllMods();
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>()
        {
            @Override
            protected Boolean doInBackground() 
            {
                if(rp.getWriter().equals("Choose...") || rp.getQa1().equals("Choose...") || rp.getAtr().equals("Choose..."))
                {
//                     JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
                    personError();
                }
                else
                {
                    for(DataModuleObject d : dms)
                    {
                        int i = dms.indexOf(d);
                        //System.out.println(d.getBaseDmc());
                        jProgressBar1.setString("Processing " + d.getBaseDmc() + "...");
                        publishOutput("Processing " + d.getBaseDmc());
//                        outputArea.append("Processing " + d.getBaseDmc() + "...\n");
//                        outputArea.setCaretPosition(outputArea.getText().length());
                        populateBp(d,i);
                        populatePdf(d,i);
                    }
                }
                
                return true; 
            }
            @Override
            protected void done()
            {
                publishOutput("Processing complete");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setVisible(false);
            }

        };
        worker.execute();
    }
    
    private void createSingleBp()
    {
        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Creating boilerplate...");
        jProgressBar1.setIndeterminate(true);
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        final DataModuleObject d = model.getDmod(folderTable.getSelectedRow());
        final int row = folderTable.getSelectedRow();
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>()
        {
            @Override
            protected Boolean doInBackground() 
            {
                if(rp.getWriter().equals("Choose...") || rp.getQa1().equals("Choose...") || rp.getAtr().equals("Choose..."))
                {
//                     JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
                    personError();
                }
                else
                {
                    System.out.println(d.getBaseDmc());
                    jProgressBar1.setString("Processing " + d.getBaseDmc() + "...");
                    publishOutput("Processing " + d.getBaseDmc());
                    populateBp(d,row);
                }
                
                return true; 
            }
            @Override
            protected void done()
            {
                publishOutput("Processing complete");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setVisible(false);
            }

        };
        worker.execute();
    }
    
    private void createBp()
    {
        jProgressBar1.setVisible(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Creating boilerplates...");
        jProgressBar1.setIndeterminate(true);
        FolderTableModel model = (FolderTableModel)folderTable.getModel();
        final List<DataModuleObject> dms = model.getAllMods();
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>()
        {
            @Override
            protected Boolean doInBackground() 
            {
                if(rp.getWriter().equals("Choose...") || rp.getQa1().equals("Choose...") || rp.getAtr().equals("Choose..."))
                {
//                     JOptionPane.showMessageDialog(RCMFormGenerator.this, "Make sure to choose a writer, QA Reviewer, and an ATR. One or more remain as 'Choose...'.", "Incorrect person choice", JOptionPane.WARNING_MESSAGE);
                    personError();
                }
                else
                {
                    for(DataModuleObject d : dms)
                    {
                        int i = dms.indexOf(d);
                        System.out.println(d.getBaseDmc());
                        jProgressBar1.setString("Processing " + d.getBaseDmc() + "...");
                        publishOutput("Processing " + d.getBaseDmc());
//                        outputArea.append("Processing " + d.getBaseDmc() + "...\n");
//                        outputArea.setCaretPosition(outputArea.getText().length());
                        populateBp(d,i);
                    }
                }
                
                return true; 
            }
            @Override
            protected void done()
            {
                publishOutput("Processing complete");
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setVisible(false);
            }

        };
        worker.execute();
    }
    
    private boolean checkBpExist(DataModuleObject d)
    {
        int res;
        if(d.isHasBoiler())
        {
            res = JOptionPane.showConfirmDialog(RCMFormGenerator.this, d.getBaseDmc() + " has a boilerplate. Update with new info?", "Boilerplare exists", JOptionPane.YES_NO_OPTION);
            
            if(res == JOptionPane.YES_OPTION)
            {
                //System.out.println(true);
                return true;
            }
            else
            {
                //System.out.println(false);
                return false;
            }
        }
        else
        {
            //System.out.println(true);
            return true;
        }
    }
    
    private void populatePdf(DataModuleObject dmod, int index)
    {
        String pdfSavePath;
        File newDir;
        String saveFolder;
        if(sepOutputFolder)
        {
            saveFolder = outputFolder + File.separator + dmod.getBaseDmc();
            newDir = new File(saveFolder);
            newDir.mkdirs();
            pdfSavePath = newDir.getAbsolutePath() + File.separator + dmod.getBaseDmc() + ".pdf";
        }
        else
        {
            saveFolder = folderPath + File.separator + "output" + File.separator + dmod.getBaseDmc();
            newDir = new File(saveFolder);
            newDir.mkdirs();
            pdfSavePath = newDir.getAbsolutePath() + File.separator + dmod.getBaseDmc() + ".pdf";
        }
        File f = new File(folderPath + File.separator + dmod.getBaseDmc() + ".xml");
        try(OutputStream out = new BufferedOutputStream(new FileOutputStream(pdfSavePath)))
        {
            File xsl = new File("styles/test3.xsl");
            
            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);
            FOUserAgent foua = fopFactory.newFOUserAgent();
            foua.getEventBroadcaster().addEventListener(new SysOutEventListener());

            TransformerFactory factory = new net.sf.saxon.TransformerFactoryImpl();

            Transformer transformer = factory.newTransformer(new StreamSource(xsl));

            Source src = new StreamSource(f);
            
            Result res = new SAXResult(fop.getDefaultHandler());
            
            transformer.transform(src, res);
        } 
        catch (IOException | FOPException | TransformerException ex) {
            java.util.logging.Logger.getLogger(RCMFormGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        processOutputFolder(saveFolder, dmod, index);
        //processFolder(new File(folderPath));
    }
    
    private void populateBp(DataModuleObject dmod, int index)
    {
        String bpSavePath, qa138SavePath, atr38SavePath,lsa38SavePath,_45SavePath, saveFolder;
        if(sepOutputFolder)
        {
            saveFolder = outputFolder + File.separator + dmod.getBaseDmc();
            File newDir = new File(saveFolder);
            newDir.mkdirs();
            bpSavePath = newDir.getAbsolutePath() + File.separator + dmod.getBaseDmc() + ".xlsm";
            qa138SavePath = newDir.getAbsolutePath() + File.separator + "RCM20038_QA1_" + dmod.getBaseDmc() + ".xlsx";
            atr38SavePath = newDir.getAbsolutePath() + File.separator + "RCM20038_ATR_" + dmod.getBaseDmc() + ".xlsx";
            lsa38SavePath = newDir.getAbsolutePath() + File.separator + "SA20038_LSA_" + dmod.getBaseDmc() + ".xlsx";
            _45SavePath = newDir.getAbsolutePath() + File.separator + "SA20045_" + dmod.getBaseDmc() + ".xlsx";
        }
        else
        {
            saveFolder = folderPath + File.separator + "output" + File.separator + dmod.getBaseDmc();
            File newDir = new File(folderPath + File.separator + "output" + File.separator + dmod.getBaseDmc());
            newDir.mkdirs();
            bpSavePath = newDir.getAbsolutePath() + File.separator + dmod.getBaseDmc() + ".xlsm";
            qa138SavePath = newDir.getAbsolutePath() + File.separator + "RCM20038_QA1_" + dmod.getBaseDmc() + ".xlsx";
            atr38SavePath = newDir.getAbsolutePath() + File.separator + "RCM20038_ATR_" + dmod.getBaseDmc() + ".xlsx";
            lsa38SavePath = newDir.getAbsolutePath() + File.separator + "SA20038_LSA_" + dmod.getBaseDmc() + ".xlsx";
            _45SavePath = newDir.getAbsolutePath() + File.separator + "SA20045_" + dmod.getBaseDmc() + ".xlsx";
        }
        //String bpSavePath = folderPath + File.separator + dmod.getBaseDmc() + ".xlsm";
        String title = getDmTitle(dmod);
        if(checkBpExist(dmod))
        {
            //System.out.println("BEFORE THE TRY");
            try(FileInputStream fis = new FileInputStream(new File("templates/CRH-BoilerPlate-REV2.xlsm"));
                    FileInputStream fis2 = new FileInputStream(new File("templates/RCM20038_QA_template.xlsx"));
                    FileInputStream fis3 = new FileInputStream(new File("templates/RCM20038_ATR_template.xlsx"));
                    FileInputStream fis4 = new FileInputStream(new File("templates/SA20038_LSA_template.xlsx"));
                    FileInputStream fis5 = new FileInputStream(new File("templates/45_template.xlsx"))
                    )
            {
                //System.out.println("IN THE TRY");
                XSSFWorkbook bpWb = new XSSFWorkbook(fis);
                XSSFWorkbook qa38Wb = new XSSFWorkbook(fis2);
                XSSFWorkbook atr38Wb = new XSSFWorkbook(fis3);
                XSSFWorkbook lsa38Wb = new XSSFWorkbook(fis4);
                XSSFWorkbook rcm45Wb = new XSSFWorkbook(fis5);
                jProgressBar1.setString("Updating " + dmod.getBaseDmc() + " boiler plate sheet...");
                //outputArea.append("\tUpdating " + dmod.getBaseDmc() + " boiler plate sheet...\n");
                publishOutput("\tUpdating " + dmod.getBaseDmc() + " boiler plate sheet");
                //process to the output pane
                XSSFSheet bpSheet = bpWb.getSheet("BoilerPlate");

                XSSFCell titleCell = bpSheet.getRow(5).getCell(1);
                titleCell.setCellValue(title);

                XSSFCell wpCell = bpSheet.getRow(7).getCell(1);
                String wp = getDmWp(dmod);
                wpCell.setCellValue(wp);

                XSSFCell writerCell = bpSheet.getRow(3).getCell(5);
                XSSFCell writerDateCell = bpSheet.getRow(4).getCell(6);
                XSSFCell qa1Cell  = bpSheet.getRow(7).getCell(5);
                XSSFCell qa1DateCell = bpSheet.getRow(8).getCell(6);
                XSSFCell atrCell  = bpSheet.getRow(11).getCell(5);
                XSSFCell atrDateCell = bpSheet.getRow(12).getCell(6);
                
                writerCell.setCellValue(rp.getWriter());
                writerDateCell.setCellValue(rp.getWriterDate());
                qa1Cell.setCellValue(rp.getQa1());
                qa1DateCell.setCellValue(rp.getQa1Date());
                atrCell.setCellValue(rp.getAtr());
                atrDateCell.setCellValue(rp.getAtrDate());
                
                /*
                    *****20038 form cells*****
                    XSSFCell modelCell = sheet.getRow(3).getCell(1);
                    XSSFCell deliverCell = sheet.getRow(3).getCell(4);
                    XSSFCell startCell = sheet.getRow(3).getCell(8);
                    XSSFCell groupCell = sheet.getRow(4).getCell(1);
                    XSSFCell wpCell = sheet.getRow(4).getCell(4);
                    XSSFCell revByCell = sheet.getRow(5).getCell(2);
                    XSSFCell revDateCell = sheet.getRow(5).getCell(8);
                    XSSFCell authorCell = sheet.getRow(6).getCell(2);
                    XSSFCell draftDueCell = sheet.getRow(13).getCell(2);
                    XSSFCell submitDateCell = sheet.getRow(13).getCell(5);
                */
                String[] Qa1_38Vals = new String[]{"HH60W-A",wp,rp.getWriterDate(),"POM/TTM",wp,rp.getQa1(),rp.getQa1Date(),rp.getWriter(),rdp.getDueDate(),rdp.getDraftDate()};//finsih this
                String[] ATR_38Vals = new String[]{"HH60W-A",wp,rp.getWriterDate(),"POM/TTM",wp,rp.getAtr(),rp.getAtrDate(),rp.getWriter(),rdp.getDueDate(),rdp.getDraftDate()};
                String[] LSA_38Vals = new String[]{"HH60W-A",wp,"TBD","POM/TTM",wp,rp.getWriter(),rp.getWriterDate(),"LSA",rdp.getDueDate(),rdp.getDraftDate()};
                populate38Form(qa38Wb,Qa1_38Vals,false);
                populate38Form(atr38Wb,ATR_38Vals,false);
                populate38Form(lsa38Wb,LSA_38Vals,true);
                
                XSSFCell sdCell = bpSheet.getRow(19).getCell(1);
                sdCell.setCellValue("HH60W IETM Report 10/14/2017");//need to make a entry for this
                
                /*
                    modelCell.setCellValue(vals[0]);
                    wpCell.setCellValue(vals[1]);
                    sdCell.setCellValue(vals[2]);
                    engRevAuthorCell.setCellValue(vals[3]);
                    engRevDateCell.setCellValue(vals[4]);
                    lsaRevAuthorCell.setCellValue(vals[5]);
                    lsaRevDateCell.setCellValue(vals[6]);
                    iatrCell.setCellValue(vals[7]);
                    iatrDateCell.setCellValue(vals[8]);
                */
                String[] _45Vals = new String[]{"HH60W-A",wp,"HH60W IETM Report 10/14/2017",rp.getWriter(),rp.getWriterDate(),rp.getWriter(),rp.getWriterDate(),rp.getAtr(),rp.getAtrDate()};
                populate45Form(rcm45Wb,_45Vals);
                XSSFCell groupCell = bpSheet.getRow(15).getCell(1);
                groupCell.setCellValue("POM/TTM");//need to create a dropdown for this
                XSSFCell samsLcnCell = bpSheet.getRow(13).getCell(1);
                samsLcnCell.setCellValue("N/A");//need to create a text entry for this

                jProgressBar1.setString("Updating " + dmod.getBaseDmc() + " QA 20038 sheet...");
                //outputArea.append("\tUpdating " + dmod.getBaseDmc() + " QA 20038 sheet...\n");
                publishOutput("\tUpdating " + dmod.getBaseDmc() + " QA 20038 sheet");
                XSSFSheet qa20038 = bpWb.getSheet("RCM20038_QA_");
                XSSFCell commCell = qa20038.getRow(17).getCell(3);
                commCell.setCellValue("NO COMMENTS");
                
                jProgressBar1.setString("Updating " + dmod.getBaseDmc() + " ATR 20038 sheet...");
                //outputArea.append("\tUpdating " + dmod.getBaseDmc() + " ATR 20038 sheet...\n");
                publishOutput("\tUpdating " + dmod.getBaseDmc() + " ATR 20038 sheet");
                XSSFSheet atr20038 = bpWb.getSheet("RCM20038_ATR_");
                XSSFCell atrcommCell = atr20038.getRow(17).getCell(3);
                atrcommCell.setCellValue("NO COMMENTS");

                try(FileOutputStream fos = new FileOutputStream(new File(bpSavePath));
                        FileOutputStream fos1 = new FileOutputStream(new File(qa138SavePath));
                        FileOutputStream fos2 = new FileOutputStream(new File(atr38SavePath));
                        FileOutputStream fos3 = new FileOutputStream(new File(lsa38SavePath));
                        FileOutputStream fos4 = new FileOutputStream(new File(_45SavePath)))
                {
                    bpWb.write(fos);
                    qa38Wb.write(fos1);
                    atr38Wb.write(fos2);
                    lsa38Wb.write(fos3);
                    rcm45Wb.write(fos4);
                }
            } 
            catch (IOException ex) {
                Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.FATAL, null, ex);
                System.out.println(ex.getMessage());
            }
            //what to do here???
            processOutputFolder(saveFolder, dmod, index);
            //processFolder(new File(folderPath));
        }
    }
    
    private void populate38Form(XSSFWorkbook wb, String[] vals, boolean isLsa)
    {
        XSSFSheet sheet = wb.getSheetAt(0);
        //get the cell objects
        XSSFCell modelCell = sheet.getRow(3).getCell(1);
        XSSFCell deliverCell = sheet.getRow(3).getCell(4);
        XSSFCell startCell = sheet.getRow(3).getCell(8);
        XSSFCell groupCell = sheet.getRow(4).getCell(1);
        XSSFCell wpCell = sheet.getRow(4).getCell(4);
        
        XSSFCell revByCell;
        XSSFCell revDateCell;
        
        if(!isLsa)
        {
            revByCell = sheet.getRow(5).getCell(2);
            revDateCell = sheet.getRow(5).getCell(8);
            XSSFCell draftDueCell = sheet.getRow(13).getCell(2);
            XSSFCell submitDateCell = sheet.getRow(13).getCell(5);
            draftDueCell.setCellValue(vals[8]);
            submitDateCell.setCellValue(vals[9]);
        }
        else
        {
            revByCell = sheet.getRow(4).getCell(2);
            revDateCell = sheet.getRow(4).getCell(8);
        }
        
        XSSFCell authorCell = sheet.getRow(6).getCell(2);
        
        //fill the cells with data
        modelCell.setCellValue(vals[0]);
        deliverCell.setCellValue(vals[1]);
        startCell.setCellValue(vals[2]);
        groupCell.setCellValue(vals[3]);
        wpCell.setCellValue(vals[4]);
        revByCell.setCellValue(vals[5]);
        revDateCell.setCellValue(vals[6]);
        authorCell.setCellValue(vals[7]);
        
    }
    
    private void populate45Form(XSSFWorkbook wb, String[] vals)
    {
        XSSFSheet sheet = wb.getSheetAt(0);
        //get the cell objects
        XSSFCell modelCell = sheet.getRow(4).getCell(5);
        XSSFCell wpCell = sheet.getRow(5).getCell(6);
        XSSFCell sdCell = sheet.getRow(9).getCell(1);
        XSSFCell engRevAuthorCell = sheet.getRow(18).getCell(6);
        XSSFCell engRevDateCell = sheet.getRow(18).getCell(10);
        XSSFCell lsaRevAuthorCell = sheet.getRow(22).getCell(6);
        XSSFCell lsaRevDateCell = sheet.getRow(22).getCell(10);
        XSSFCell iatrCell = sheet.getRow(26).getCell(6);
        XSSFCell iatrDateCell = sheet.getRow(26).getCell(10);
        //set the cell values
        modelCell.setCellValue(vals[0]);
        wpCell.setCellValue(vals[1]);
        sdCell.setCellValue(vals[2]);
        engRevAuthorCell.setCellValue(vals[3]);
        engRevDateCell.setCellValue(vals[4]);
        lsaRevAuthorCell.setCellValue(vals[5]);
        lsaRevDateCell.setCellValue(vals[6]);
        iatrCell.setCellValue(vals[7]);
        iatrDateCell.setCellValue(vals[8]);
    }
    
    private String getDmWp(DataModuleObject dmo)
    {
       String xmlFile = folderPath + File.separator + dmo.getBaseDmc() + ".xml";
       String dmc_xp = "/dmodule/identAndStatusSection/dmAddress/dmIdent/dmCode";
       try
       {
           Document doc = DB.parse(new File(xmlFile));
           Node dmc = (Node)XP.compile(dmc_xp).evaluate(doc, XPathConstants.NODE);
           NamedNodeMap dmc_atts = dmc.getAttributes();
           
           return dmc_atts.getNamedItem("systemCode").getNodeValue() + "-" +
                   dmc_atts.getNamedItem("subSystemCode").getNodeValue() + dmc_atts.getNamedItem("subSubSystemCode").getNodeValue() + "-" +
                   dmc_atts.getNamedItem("assyCode").getNodeValue() + "-" + 
                   dmc_atts.getNamedItem("disassyCode").getNodeValue() + dmc_atts.getNamedItem("disassyCodeVariant").getNodeValue() + "-" +
                   dmc_atts.getNamedItem("infoCode").getNodeValue() + dmc_atts.getNamedItem("infoCodeVariant").getNodeValue() + "-" + dmc_atts.getNamedItem("itemLocationCode").getNodeValue();
           
       } catch (SAXException | IOException | XPathExpressionException ex) {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.FATAL, null, ex);
            return null;
        }
    }
    
    private String getDmTitle(DataModuleObject dmo)
    {
        String xmlFile = folderPath + File.separator + dmo.getBaseDmc() + ".xml";
        String tn_xp = "/dmodule/identAndStatusSection/dmAddress/dmAddressItems/dmTitle/techName";
        String in_xp = "/dmodule/identAndStatusSection/dmAddress/dmAddressItems/dmTitle/infoName";
        try
        {
            Document doc = DB.parse(new File(xmlFile));
            Node tn = (Node)XP.compile(tn_xp).evaluate(doc, XPathConstants.NODE);
            Node iN = (Node)XP.compile(in_xp).evaluate(doc, XPathConstants.NODE);
            
            return tn.getTextContent() + " - " + iN.getTextContent();
        } 
        catch (SAXException | IOException | XPathExpressionException ex) {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.FATAL, null, ex);
            return null;
        }
        
    }
    
    private XMLCatalogResolver createXMLCatalogResolver(CatalogResolver resolver)
    {
        int i = 0;
        
        Vector files = resolver.getCatalog().getCatalogManager().getCatalogFiles();
        String[] catalogs = new String[files.size()];
        XMLCatalogResolver xcr = new XMLCatalogResolver();
        
        for(Object file : files)
        {
            catalogs[i] = new File(file.toString()).getAbsolutePath();
        }
        
        xcr.setCatalogList(catalogs);
        return xcr;
    }
    
    private void clearTable()
    {
        while(folderTable.getRowCount() > 0)
        {
            ((FolderTableModel)folderTable.getModel()).removeRow(0);
        }
    }
    
    private void initDb()
    {
        try 
        {
            //DBF = DocumentBuilderFactory.newInstance();
            //DB = DBF.newDocumentBuilder();
            resolver = new CatalogResolver();
            eHandler = new DocumentErrorHandler();
            XMLCatalogResolver xres = createXMLCatalogResolver(resolver);
            DBF = DocumentBuilderFactory.newInstance();
            DBF.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            DBF.setNamespaceAware(true);
            DB = DBF.newDocumentBuilder();
            DB.setEntityResolver(xres);
            DB.setErrorHandler(eHandler);
        } 
        catch (ParserConfigurationException ex) 
        {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.FATAL, null, ex);
        }
    }
    
    private void initFop()
    {
        try
        {
            fopFactory = FopFactory.newInstance(new File("conf/fop.xconf"));
        }
        catch(SAXException | IOException ex)
        {
            Logger.getLogger(RCMFormGenerator.class.getName()).log(Level.WARN, null, ex);
        }
    }
    
    private void initXpath()
    {
        XPF = XPathFactory.newInstance();
        XP = XPF.newXPath();
        
        XP.setNamespaceContext(new NamespaceContext(){
            @Override
            public String getNamespaceURI(String prefix) {
                if(prefix == null)
                {
                    throw new NullPointerException("Null prefix");
                }
                else if("xsi".equals(prefix))
                {
                    return "http://www.w3.org/2001/XMLSchema-instance";
                }
                else if("xml".equals(prefix))
                {
                    return XMLConstants.XML_NS_URI;
                }
                else
                {
                    return XMLConstants.NULL_NS_URI;
                }
            }

            @Override
            public String getPrefix(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator getPrefixes(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        
        });
    }
    
    private void setRibbon() {

        chooseFolderBand = new JRibbonBand("Input folder", null);
        createSettingsBand = new JFlowRibbonBand("Stage information", null);
        dueDatesBand = new JFlowRibbonBand("Due dates", null);
        chooseOutputFolderBand = new JRibbonBand("Output folder", null);
        outputBand = new JRibbonBand("Batch ouput types", null);

        chooseFolderButton = new JCommandButton("Choose Input Folder", getIcon("folder-12.png"));
        chooseFolderButton.setDisabledIcon(getIcon("folder-12.png"));
        chooseFolderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                jFileChooser1.setDialogTitle("Choose Folder");
                int res = jFileChooser1.showOpenDialog(RCMFormGenerator.this);
                if(res == JFileChooser.APPROVE_OPTION)
                {
                    clearTable();
                    processFolder(jFileChooser1.getSelectedFile());
                }
            }
        });
        
        chooseOutputFolderButton = new JCommandButton("Choose Output Folder", getIcon("folder-12.png"));
        chooseOutputFolderButton.setDisabledIcon(getIcon("folder-12.png"));
        chooseOutputFolderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                jFileChooser1.setDialogTitle("Choose Folder");
                int res = jFileChooser1.showOpenDialog(RCMFormGenerator.this);
                if(res == JFileChooser.APPROVE_OPTION)
                {
                    //set final variable for this path
                    outputFolder = jFileChooser1.getSelectedFile().getAbsolutePath();
                    sepOutputFolder = true;
                }
            }
        });

        createAllItemsButton = new JCommandButton("Create Boilerplate and PDF", getIcon("list.png"));
        createAllItemsButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                createBoth();
            }
            });
        createAllBoilerButton = new JCommandButton("Create only Boilerplate", getIcon("notepad.png"));
        createAllBoilerButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                createBp();
            }
        });
        createAllPdfButton = new JCommandButton("Create only PDF", getIcon("notebook.png"));
        createAllPdfButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                createPdf();
            }
        });
        
        rp = new RibbonStagePanel();
        rdp = new RibbonDraftPanel();
        
        JRibbonComponent jrc = new JRibbonComponent(rp);
        JRibbonComponent date_jrc = new JRibbonComponent(rdp);
        //JRibbonComponent jrc2 = new JRibbonComponent(myjtf);
        
        chooseFolderBand.addCommandButton(chooseFolderButton, RibbonElementPriority.TOP);
        chooseOutputFolderBand.addCommandButton(chooseOutputFolderButton, RibbonElementPriority.TOP);
        //createSettingsBand.addCommandButton(b1a, RibbonElementPriority.TOP);
        createSettingsBand.addFlowComponent(jrc);
        dueDatesBand.addFlowComponent(date_jrc);
        //createSettingsBand2.addRibbonComponent(jrc2);
        outputBand.addCommandButton(createAllItemsButton, RibbonElementPriority.TOP);
        outputBand.addCommandButton(createAllBoilerButton, RibbonElementPriority.MEDIUM);
        outputBand.addCommandButton(createAllPdfButton, RibbonElementPriority.MEDIUM);

        chooseFolderBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(chooseFolderBand.getControlPanel()), new IconRibbonBandResizePolicy(chooseFolderBand.getControlPanel())));
        chooseOutputFolderBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(chooseOutputFolderBand.getControlPanel()), new IconRibbonBandResizePolicy(chooseOutputFolderBand.getControlPanel())));
        //createSettingsBand2.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.(createSettingsBand2.getControlPanel())));
        createSettingsBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.FlowThreeRows(createSettingsBand.getControlPanel())));
        dueDatesBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.FlowThreeRows(dueDatesBand.getControlPanel())));
        outputBand.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(outputBand.getControlPanel()), 
                new CoreRibbonResizePolicies.Mirror(outputBand.getControlPanel()),
                new CoreRibbonResizePolicies.Mid2Low(outputBand.getControlPanel()),
                new IconRibbonBandResizePolicy(outputBand.getControlPanel())));

        createTask = new RibbonTask("Folders", chooseFolderBand, chooseOutputFolderBand);
        outputTask = new RibbonTask("Output", outputBand);
        settingsTask = new RibbonTask("Dates / People", createSettingsBand, dueDatesBand);
        menu = new AppMenu();

        this.getRibbon().setApplicationMenu(menu);
        this.getRibbon().addTask(createTask);
        this.getRibbon().addTask(settingsTask);
        this.getRibbon().addTask(outputTask);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dmCounterLabel;
    private javax.swing.JTable folderTable;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JMenuItem popUpBpItem;
    private javax.swing.JMenuItem popUpPdfItem;
    private javax.swing.JPopupMenu tablePopUpMenu;
    // End of variables declaration//GEN-END:variables

    private DocumentBuilderFactory DBF;
    private DocumentBuilder DB;
    private XPathFactory XPF;
    private XPath XP;
    private CatalogResolver resolver;
    private ErrorHandler eHandler;
    
    private FopFactory fopFactory;
    
    private String folderPath;
    
    private RibbonStagePanel rp;
    private RibbonDraftPanel rdp;
    private RibbonTask createTask; //Database actions tab
    private RibbonTask settingsTask;
    private RibbonTask outputTask;
    
    private RibbonApplicationMenu menu;
    
    private JRibbonBand chooseFolderBand;
    private JRibbonBand chooseOutputFolderBand;
    private JFlowRibbonBand createSettingsBand;
    private JFlowRibbonBand dueDatesBand;
    private JRibbonBand outputBand;
    private JRibbonBand exportBand;
    
    private JCommandButton chooseFolderButton;
    private JCommandButton chooseOutputFolderButton;
    private JCommandButton createAllItemsButton;
    private JCommandButton createAllBoilerButton;
    private JCommandButton createAllPdfButton;
    
    private FolderTableModel ftm;
    
    class AppMenu extends RibbonApplicationMenu {

        private boolean testBool = false;
        private AppMenuPrimaryEntry exitEntry;

        public AppMenu() {
            
            exitEntry = new AppMenuPrimaryEntry(getIcon("exit.png"), "Exit", new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);//To change body of generated methods, choose Tools | Templates.
                }
            }, JCommandButton.CommandButtonKind.ACTION_ONLY);
            this.addMenuEntry(exitEntry);

        }
    }
    class ProgressBarPainter implements Painter<javax.swing.JProgressBar>{
        private final Color color;
        
        public ProgressBarPainter(Color c)
        {
            this.color = c;
        }
        
        @Override
        public void paint(Graphics2D g, JProgressBar object, int width, int height) {
            g.setColor(color);
            g.fillRect(0, height-(height/2), width, height/5);
            g.fillOval(0, 0, width/2, height);
            //g.fillRect(0, 0, (width/2), height);
        }
        
    }
}
